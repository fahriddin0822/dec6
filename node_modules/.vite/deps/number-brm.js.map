{
  "version": 3,
  "sources": ["../../number-brm/index.js"],
  "sourcesContent": ["/**\r\n * Bu Number metodning vazifasi:\r\n * 1. Sonlarni uchxonaga bo'lgan holda string qaytaradi.\r\n * 2. Agar argumentga \"int\"ni yozilsa yoki yozilmasa ham uchxonaga bo'ladi \r\n * va \"int\"ni argument sifatida bersangiz ikkinchi argumentga qoldiq son miqdorini raqamda beriladi\r\n * 3. Agar argumentga \"int\"ni o'rniga \"string\" bersangiz \"10k, 9.1m, 3B\" shu shaklda qaytaradi\r\n * @param type stringni ichida \"int\" yoki \"string\" yozing\r\n * @param rest agar birinchi argumentga \"int\" yozgan bo'lsangiz qoldiq son miqdorini numberda kiriting\r\n */\r\n module.exports = Number.prototype.brm = function(type, rest=2){\r\n    if(type === \"int\" || type === undefined || type === \"\"){\r\n        let str, qol\r\n        if(String(this).indexOf(\".\") === -1){\r\n            str = String(this).split('').reverse().join('')\r\n            qol = \"\"\r\n        }else{\r\n            str = String(this).slice(0,String(this).indexOf(\".\")).split('').reverse().join('')\r\n            qol = rest === 0 ? \"\" : String(this).slice(String(this).indexOf(\".\")).slice(0, rest+1)\r\n        }\r\n        let arr = []\r\n        for(let i = 3; i < str.length + 3; i+=3){\r\n            arr.push(str.slice(i-3, i))\r\n        }\r\n        return arr.map(i=>i.split(\"\").reverse().join(\"\")).reverse().join(' ') + qol\r\n    }else if(type === \"string\"){\r\n        let leng = String(Math.floor(this)).length\r\n        let num = String(Math.floor(this)).split('').reverse()\r\n        if(leng < 4){\r\n            return Math.floor(this)\r\n        }else if(leng < 7){\r\n            return num.slice(3).reverse().join('')  + `${+num.slice(2,3) === 0 ? \"\" : \".\"+ num.slice(2,3)}k` \r\n        }else if(leng < 10){\r\n            return num.slice(6).reverse().join('') + `${+num.slice(5,6) === 0 ? \"\" : \".\"+ num.slice(5,6)}m`\r\n        }else {\r\n            return num.slice(9).reverse().join('') + \"B\"\r\n        }\r\n    }else{\r\n        return `\"int\" yoki \"string\" yozing - \"${type}\"`\r\n    }\r\n}\r\n\r\n\r\n\r\n"],
  "mappings": ";;;;;AAAA;AAAA;AASC,WAAO,UAAU,OAAO,UAAU,MAAM,SAAS,MAAM,OAAK,GAAE;AAC3D,UAAG,SAAS,SAAS,SAAS,UAAa,SAAS,IAAG;AACnD,YAAI,KAAK;AACT,YAAG,OAAO,IAAI,EAAE,QAAQ,GAAG,MAAM,IAAG;AAChC,gBAAM,OAAO,IAAI,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE;AAC9C,gBAAM;AAAA,QACV,OAAK;AACD,gBAAM,OAAO,IAAI,EAAE,MAAM,GAAE,OAAO,IAAI,EAAE,QAAQ,GAAG,CAAC,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE;AACjF,gBAAM,SAAS,IAAI,KAAK,OAAO,IAAI,EAAE,MAAM,OAAO,IAAI,EAAE,QAAQ,GAAG,CAAC,EAAE,MAAM,GAAG,OAAK,CAAC;AAAA,QACzF;AACA,YAAI,MAAM,CAAC;AACX,iBAAQ,IAAI,GAAG,IAAI,IAAI,SAAS,GAAG,KAAG,GAAE;AACpC,cAAI,KAAK,IAAI,MAAM,IAAE,GAAG,CAAC,CAAC;AAAA,QAC9B;AACA,eAAO,IAAI,IAAI,OAAG,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,KAAK,GAAG,IAAI;AAAA,MAC5E,WAAS,SAAS,UAAS;AACvB,YAAI,OAAO,OAAO,KAAK,MAAM,IAAI,CAAC,EAAE;AACpC,YAAI,MAAM,OAAO,KAAK,MAAM,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,QAAQ;AACrD,YAAG,OAAO,GAAE;AACR,iBAAO,KAAK,MAAM,IAAI;AAAA,QAC1B,WAAS,OAAO,GAAE;AACd,iBAAO,IAAI,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAK,GAAG,CAAC,IAAI,MAAM,GAAE,CAAC,MAAM,IAAI,KAAK,MAAK,IAAI,MAAM,GAAE,CAAC,CAAC;AAAA,QACjG,WAAS,OAAO,IAAG;AACf,iBAAO,IAAI,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,IAAI,MAAM,GAAE,CAAC,MAAM,IAAI,KAAK,MAAK,IAAI,MAAM,GAAE,CAAC,CAAC;AAAA,QAChG,OAAM;AACF,iBAAO,IAAI,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI;AAAA,QAC7C;AAAA,MACJ,OAAK;AACD,eAAO,iCAAiC,IAAI;AAAA,MAChD;AAAA,IACJ;AAAA;AAAA;",
  "names": []
}
